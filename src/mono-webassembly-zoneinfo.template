;(function(global) {
    'use strict';
	var __Mono_WebAssembly_ZoneInfo__ = function () {
		return new __Mono_WebAssembly_ZoneInfo__.init();
	}

	var version = "1.0.0";
	var IANA_TZD_Version = "$$IANA_VERSION$$";

	/*\
	|*|
	|*|  Base64 / binary data / UTF-8 strings utilities (#1)
	|*|
	|*|  https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding
	|*|
	|*|  Author: madmurphy
	|*|
	|*|	https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_1_%E2%80%93_JavaScript's_UTF-16_%3E_base64
	\*/

	/* Array of bytes to base64 string decoding */
	function b64ToUint6 (nChr) {

		return nChr > 64 && nChr < 91 ?
			nChr - 65
		: nChr > 96 && nChr < 123 ?
			nChr - 71
		: nChr > 47 && nChr < 58 ?
			nChr + 4
		: nChr === 43 ?
			62
		: nChr === 47 ?
			63
		:
			0;
	
	}
  
	function base64DecToArr (sBase64, nBlockSize) {
  
		var
			sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,
			nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2, aBytes = new Uint8Array(nOutLen);
  
		for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
			nMod4 = nInIdx & 3;
			nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
			if (nMod4 === 3 || nInLen - nInIdx === 1) {
			for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
				aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
			}
			nUint24 = 0;
			}
		}
  
		return aBytes;
	}

	__Mono_WebAssembly_ZoneInfo__.prototype = {
		Version: version,
		IANAVersion: IANA_TZD_Version,
		mono_wasm_timezone_get_local_name: function() {
			var res = "UTC";
			try { 
				res = Intl.DateTimeFormat().resolvedOptions().timeZone; 
			} 
			catch(e) {} 
		
			var buff = Module._malloc((res.length + 1) * 2);
			stringToUTF16 (res, buff, (res.length + 1) * 2);
			return buff;
		},
		mono_timezone_get_data_buffer: function (id) {
			var foundZone = zones.find(x => x.id === id);
			if (typeof foundZone !== "undefined") {
				var binBuffer = base64DecToArr(foundZone.data);
				return binBuffer;
			}
			else
				return null;
		},
		mono_timezone_get_data: function (id, size) {
			var uint8ArrayData = this.mono_timezone_get_data_buffer(id);
			if (uint8ArrayData) {
				var numBytes = uint8ArrayData.length * uint8ArrayData.BYTES_PER_ELEMENT;
				var ptr = Module._malloc(numBytes);
				var heapBytes = new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
				heapBytes.set(new Uint8Array(uint8ArrayData.buffer, uint8ArrayData.byteOffset, numBytes));
				setValue (size, uint8ArrayData.length, "i32");
				return heapBytes.byteOffset;				
			}
			return null;
		},
		mono_wasm_timezones: function () { return zones; },
		mono_wasm_timezone_get_names: function() {
			return zones;
		},
		mono_wasm_timezone_get_names_count: function() {
			return zones.length;
		},
		mono_wasm_timezone_get_name_at_index: function(index) {
			var foundZone = zones[index];
			if (typeof foundZone !== "undefined") {
				var zoneId = foundZone.id;
				// var buff = Module._malloc((zoneId.length + 1) * 2);
				// stringToUTF16 (zoneId, buff, (zoneId.length + 1) * 2);
				var buff = Module._malloc((zoneId.length + 1));
				stringToUTF8 (zoneId, buff, (zoneId.length + 1));
				return buff;
			}
			else
				return null;
		},
	};

	__Mono_WebAssembly_ZoneInfo__.init = function ()
	{
		if (typeof self !== "undefined")
			self = this;
		// place other initialization here.
		console.log("initialized Mono WebAssembly TimeZone Data Base");
	}

	__Mono_WebAssembly_ZoneInfo__.init.prototype = __Mono_WebAssembly_ZoneInfo__.prototype;

	// setup on the global object
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = __Mono_WebAssembly_ZoneInfo__() :
	global.Mono_WebAssembly_ZoneInfo = __Mono_WebAssembly_ZoneInfo__();

	// zone info is automatically generated
	var zones = [
$$ZONES$$
	];
}(this));
